from aiogram import types, Router
from aiogram.types import KeyboardButton
from aiogram.filters import Command
from handlers.keyboards import main_keyboard
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from db_bot.database import db_show, select_row_from_db

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Make_order(StatesGroup):
    collection = State()
    color = State()
    size = State()
    addr = State()
    


@router.message(F.text == "–∫–∞—Ç–∞–ª–æ–≥")
async def handle_catalog(message: types.Message, state: FSMContext):
    await state.set_state(Make_order.collection)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    tuple_list = await db_show(['collection'], 'clothes')
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    unique_elements = list({item[0] for item in tuple_list})
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    catalog_kb = ReplyKeyboardBuilder()
    for el in unique_elements:
        catalog_kb.add(KeyboardButton(text=el))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é:",
        reply_markup=catalog_kb.as_markup(resize_keyboard=True)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º as_markup()
    )


@router.message(Make_order.collection)
async def make_order(message: types.Message, state: FSMContext):
    await state.update_data(collection = message.text)
    await state.set_state(Make_order.color)
    tuple_list = await db_show(['color'], 'clothes')
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    unique_elements = list({item[0] for item in tuple_list})
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    catalog_kb2 = ReplyKeyboardBuilder()
    
    for el in unique_elements:
        catalog_kb2.add(KeyboardButton(text=el))
        
    await message.answer('–≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç', reply_markup=catalog_kb2.as_markup(resize_keyboard=True))


@router.message(Make_order.color)
async def make_order_two(message: types.Message, state: FSMContext):
    await state.update_data(color = message.text)
    await state.set_state(Make_order.size)
    tuple_list = await db_show(['size'], 'sizes_and_counts', eq1='count')
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    unique_elements = list({item[0] for item in tuple_list})
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    catalog_kb = ReplyKeyboardBuilder()
    for el in unique_elements:
        catalog_kb.add(KeyboardButton(text=str(el)))
        
    await message.answer('—Ä–∞–∑–º–µ—Ä', reply_markup=catalog_kb.as_markup(resize_keyboard=True))
    

@router.message(Make_order.size)
async def make_order_three(message: types.Message, state: FSMContext):
    await state.update_data(size = message.text)
    await state.set_state(Make_order.addr)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ üöõ –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, —É–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞, –¥–æ–º 37")
    
    
@router.message(Make_order.addr)
async def make_order_four(message: types.Message, state: FSMContext):
    await state.update_data(addr = message.text)
    data = await state.get_data()
    
    await message.answer(f"–≤—ã —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑... {data}")
    await state.clear()
    
